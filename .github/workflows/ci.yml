on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  build-backend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache backend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-backend-${{ hashFiles('runtime/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-backend-

    - name: Install backend dependencies
      run: |
        cd runtime
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  test-backend:
    runs-on: ubuntu-latest
    needs: build-backend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache backend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-backend-${{ hashFiles('runtime/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-backend-

    - name: Install backend dependencies
      run: |
        cd runtime
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run backend tests with coverage
      run: |
        cd runtime
        mkdir -p test-reports
        pytest \
          --cov=. \
          --cov-report=xml:../coverage-backend.xml \
          --cov-report=term-missing \
          --junitxml=test-reports/pytest.xml

    - name: Upload backend coverage
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: |
          coverage-backend.xml
          runtime/test-reports/

  build-frontend:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache frontend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-frontend-${{ hashFiles('front/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-frontend-

    - name: Install frontend dependencies
      run: |
        cd front
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  test-frontend:
    runs-on: ubuntu-latest
    needs: build-frontend

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache frontend dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-frontend-${{ hashFiles('front/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-frontend-

    - name: Install frontend dependencies
      run: |
        cd front
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run frontend tests with coverage
      run: |
        cd front
        mkdir -p test-reports
        pytest \
          --cov=. \
          --cov-report=xml:../coverage-frontend.xml \
          --cov-report=term-missing \
          --junitxml=test-reports/pytest.xml

    - name: Upload frontend coverage
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: |
          coverage-frontend.xml
          front/test-reports/

  build-telegram:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache telegram dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-telegram-${{ hashFiles('telegram/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-telegram-

    - name: Install frontend dependencies
      run: |
        cd telegram
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  test-telegram:
    runs-on: ubuntu-latest
    needs: build-telegram

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Cache telegram dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-telegram-${{ hashFiles('telegram/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-telegram-

    - name: Install telegram dependencies
      run: |
        cd telegram
        pip install -r requirements.txt
        pip install pytest-cov

    - name: Run telegram tests with coverage
      run: |
        cd telegram
        mkdir -p test-reports
        pytest \
          --cov=. \
          --cov-report=xml:../coverage-telegram.xml \
          --cov-report=term-missing \
          --junitxml=test-reports/pytest.xml

    - name: Upload telegram coverage
      uses: actions/upload-artifact@v4
      with:
        name: telegram-coverage
        path: |
          coverage-telegram.xml
          telegram/test-reports/


  sonarqube-analysis:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-telegram]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download backend coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: .

    - name: Download frontend coverage
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: .

    - name: Download telegram coverage
      uses: actions/download-artifact@v4
      with:
        name: telegram-coverage
        path: .

    - name: Prepare coverage reports
      run: |
        mkdir -p test-reports
        if [ -f "runtime/test-reports/pytest.xml" ]; then
          cp runtime/test-reports/pytest.xml test-reports/pytest-backend.xml
        fi
        if [ -f "front/test-reports/pytest.xml" ]; then
          cp front/test-reports/pytest.xml test-reports/pytest-frontend.xml
        fi
        if [ -f "telegram/test-reports/pytest.xml" ]; then
          cp telegram/test-reports/pytest.xml test-reports/pytest-telegram.xml
        fi

    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      with:
        projectBaseDir: .
        args: >
          -Dsonar.projectKey=itmo-gpt
          -Dsonar.projectName="ITMO GPT"
          -Dsonar.projectVersion=1.0
          -Dsonar.sources=runtime,front,telegram
          -Dsonar.exclusions=/venv/,/pycache/,/migrations/,/static/,/media/,/.git/,/tests/,/test_,/htmlcov/,/.pytest_cache/,/node_modules/,/init.py,/settings.py,**/manage.py
          -Dsonar.tests=runtime/tests,front/tests,telegram/tests
          -Dsonar.test.inclusions=/test_*.py,/*_test.py,/tests//*.py
          -Dsonar.python.coverage.reportPaths=coverage-backend.xml,coverage-frontend.xml,coverage-telegram.xml
          -Dsonar.python.xunit.reportPath=test-reports/pytest-backend.xml,test-reports/pytest-frontend.xml,test-reports/pytest-telegram.xml
          -Dsonar.coverage.exclusions=/tests/,/test_,/venv/,/pycache/,/migrations/,/settings.py,/manage.py
          -Dsonar.sourceEncoding=UTF-8
          -Dsonar.python.version=3.9
          -Dsonar.qualitygate.wait=true

    - name: SonarQube Quality Gate check
      uses: sonarsource/sonarqube-quality-gate-action@master
      timeout-minutes: 5
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  push-to-registry:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-telegram]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Login to Yandex Container Registry
      run: |
        echo ${{ secrets.YANDEX_TOKEN }} | docker login --username oauth --password-stdin cr.yandex
     
    - name: Build and push frontend image
      run: |
        docker build -t cr.yandex/crpfobr25c755gi1uh6f/myapp-front:latest ./front
        docker push cr.yandex/crpfobr25c755gi1uh6f/myapp-front:latest
    
    - name: Build and push backend image
      run: |
        docker build -t cr.yandex/crpfobr25c755gi1uh6f/myapp-runtime:latest ./runtime
        docker push cr.yandex/crpfobr25c755gi1uh6f/myapp-runtime:latest
    
    - name: Build and push telegram image
      run: |
        docker build -t cr.yandex/crpfobr25c755gi1uh6f/myapp-telegram:latest ./telegram
        docker push cr.yandex/crpfobr25c755gi1uh6f/myapp-telegram:latest
  deploy:
    runs-on: ubuntu-latest
    needs: [push-to-registry]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup kubectl
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > ~/.kube/config
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f runtime/runtime-deployment.yaml --validate=false --insecure-skip-tls-verify
        kubectl apply -f front/front-deployment.yaml --validate=false --insecure-skip-tls-verify
        kubectl apply -f telegram/telegram-deployment.yaml --validate=false --insecure-skip-tls-verify
        
        kubectl patch deployment myapp-frontend -n myapp -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"date +'%s'\"}}}}}"
        kubectl patch deployment myapp-backend -n myapp -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"date +'%s'\"}}}}}"
        kubectl patch deployment myapp-telegram -n myapp -p "{\"spec\":{\"template\":{\"metadata\":{\"annotations\":{\"date\":\"date +'%s'\"}}}}}"
        
        kubectl rollout status deployment/myapp-frontend --timeout=300s
        kubectl rollout status deployment/myapp-backend --timeout=300s
        kubectl rollout status deployment/myapp-telegram --timeout=300s
        
        echo "✅ All deployments updated successfully"
        kubectl get pods -n myapp
